Index: banshee/src/Core/Banshee.Base/Banshee.AudioProfiles/GConfProfileConfiguration.cs
===================================================================
--- banshee/src/Core/Banshee.Base/Banshee.AudioProfiles/GConfProfileConfiguration.cs	(revision 2588)
+++ banshee/src/Core/Banshee.Base/Banshee.AudioProfiles/GConfProfileConfiguration.cs	(working copy)
@@ -1,82 +0,0 @@
-/***************************************************************************
- *  GConfProfileConfiguration.cs
- *
- *  Copyright (C) 2006 Novell, Inc.
- *  Written by Aaron Bockover <aaron@abock.org>
- ****************************************************************************/
-
-/*  THIS FILE IS LICENSED UNDER THE MIT LICENSE AS OUTLINED IMMEDIATELY BELOW: 
- *
- *  Permission is hereby granted, free of charge, to any person obtaining a
- *  copy of this software and associated documentation files (the "Software"),  
- *  to deal in the Software without restriction, including without limitation  
- *  the rights to use, copy, modify, merge, publish, distribute, sublicense,  
- *  and/or sell copies of the Software, and to permit persons to whom the  
- *  Software is furnished to do so, subject to the following conditions:
- *
- *  The above copyright notice and this permission notice shall be included in 
- *  all copies or substantial portions of the Software.
- *
- *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
- *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
- *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
- *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
- *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
- *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
- *  DEALINGS IN THE SOFTWARE.
- */
- 
-using System;
-using System.Text;
-using System.Xml;
-using System.Collections;
-using System.Collections.Generic;
-
-using GConf;
-
-namespace Banshee.AudioProfiles
-{
-    public class GConfProfileConfiguration : ProfileConfiguration
-    {
-        private string gconf_root;
-        private GConf.Client client;
-        
-        public GConfProfileConfiguration(Profile profile, string gconfRoot, string id) : base(profile, id)
-        {
-            client = new GConf.Client();
-            this.gconf_root = gconfRoot;
-        }
-        
-        internal static string LoadActiveProfile(string gconfRoot, string id)
-        {
-            GConf.Client client = new GConf.Client();
-            return (string)client.Get(gconfRoot + id + "/active_profile");
-        }
-        
-        internal static void SaveActiveProfile(Profile profile, string gconfRoot, string id)
-        {
-            GConf.Client client = new GConf.Client();
-            client.Set(gconfRoot + id + "/active_profile", profile.ID);
-        }
-
-        protected override void Load()
-        {
-            try {
-                foreach(string variable in (string [])client.Get(gconf_root + "variables")) {
-                    Add(variable, (string)client.Get(gconf_root + variable));
-                }
-            } catch {
-            }
-        }
-        
-        public override void Save()
-        {
-            List<string> variable_names = new List<string>();
-            foreach(KeyValuePair<string, string> variable in this) {
-                variable_names.Add(variable.Key);
-                client.Set(gconf_root + variable.Key, variable.Value);
-            }
-            client.Set(gconf_root + "variables", variable_names.ToArray());
-        }
-    }
-}
Index: banshee/src/Core/Banshee.Base/Banshee.AudioProfiles/ProfileConfiguration.cs
===================================================================
--- banshee/src/Core/Banshee.Base/Banshee.AudioProfiles/ProfileConfiguration.cs	(revision 2588)
+++ banshee/src/Core/Banshee.Base/Banshee.AudioProfiles/ProfileConfiguration.cs	(working copy)
@@ -32,9 +32,11 @@
 using System.Collections;
 using System.Collections.Generic;
 
+using Banshee.Configuration;
+
 namespace Banshee.AudioProfiles
 {
-    public abstract class ProfileConfiguration : IEnumerable<KeyValuePair<string, string>>
+    public class ProfileConfiguration : IEnumerable<KeyValuePair<string, string>>
     {
         private Dictionary<string, string> variable_values = new Dictionary<string, string>();
         private string id;
@@ -42,38 +44,31 @@
         
         public static ProfileConfiguration Load(Profile profile, string id)
         {
-            ProfileConfiguration configuration = new GConfProfileConfiguration(profile,
-                Banshee.Configuration.GConfConfigurationClient.BaseKey + 
-                    "audio_profiles/" + id + "/" + profile.ID + "/", id);
+            ProfileConfiguration configuration = new ProfileConfiguration(profile, id);
             configuration.Load();
             return configuration;
         }
-        
+
         public static Profile LoadActiveProfile(ProfileManager manager, string id)
         {
-            try {
-                string profile_id = GConfProfileConfiguration.LoadActiveProfile(
-                    Banshee.Configuration.GConfConfigurationClient.BaseKey + "audio_profiles/", id);
-                
-                if(profile_id == null) {
-                    return null;
+            string profile_id = ConfigurationClient.Get<string>(MakeConfNamespace(id), "active_profile", string.Empty);
+
+            if(profile_id == string.Empty) {
+                return null;
+            }
+
+            foreach(Profile profile in manager.GetAvailableProfiles()) {
+                if(profile.ID == profile_id) {
+                    return profile;
                 }
-            
-                foreach(Profile profile in manager.GetAvailableProfiles()) {
-                    if(profile.ID == profile_id) {
-                        return profile;
-                    }
-                }
-            } catch {
             }
-            
+
             return null;
         }
         
         public static void SaveActiveProfile(Profile profile, string id)
         {
-            GConfProfileConfiguration.SaveActiveProfile(profile,
-                Banshee.Configuration.GConfConfigurationClient.BaseKey + "audio_profiles/", id);
+            ConfigurationClient.Set<string>(MakeConfNamespace(id), "active_profile", profile.ID);
         }
         
         public ProfileConfiguration(Profile profile, string id)
@@ -82,8 +77,22 @@
             this.id = id;
         }
 
-        protected abstract void Load();
-        public abstract void Save();
+        protected virtual void Load()
+        {
+            foreach(string variable in ConfigurationClient.Get<string[]>(ConfNamespace, "variables", new string[0])) {
+                Add(variable, ConfigurationClient.Get<string>(ConfNamespace, variable, string.Empty));
+            }
+        }
+
+        public virtual void Save()
+        {
+            List<string> variable_names = new List<string>(Count);
+            foreach(KeyValuePair<string, string> variable in this) {
+                variable_names.Add(variable.Key);
+                ConfigurationClient.Set<string>(ConfNamespace, variable.Key, variable.Value);
+            }
+            ConfigurationClient.Set<string[]>(ConfNamespace, "variables", variable_names.ToArray());
+        }
         
         public void Add(string variable, string value)
         {
@@ -118,5 +127,18 @@
         public string ID {
             get { return id; }
         }
+
+        public int Count {
+            get { return variable_values.Count; }
+        }
+
+        protected string ConfNamespace {
+            get { return MakeConfNamespace(id); }
+        }
+
+        protected static string MakeConfNamespace(string id)
+        {
+            return String.Format("audio_profiles.{0}", id);
+        }
     }
-}
+}
\ No newline at end of file
