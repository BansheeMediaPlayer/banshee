// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Nautilus {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class BurnDriveSelection : Gtk.ComboBox {

		~BurnDriveSelection()
		{
			Dispose();
		}

		[Obsolete]
		protected BurnDriveSelection(GLib.GType gtype) : base(gtype) {}
		public BurnDriveSelection(IntPtr raw) : base(raw) {}

		[DllImport("libnautilus-burn")]
		static extern IntPtr nautilus_burn_drive_selection_new();

		public BurnDriveSelection () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (BurnDriveSelection)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = nautilus_burn_drive_selection_new();
		}

		[DllImport("libnautilus-burn")]
		static extern IntPtr nautilus_burn_drive_selection_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = nautilus_burn_drive_selection_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libnautilus-burn")]
		static extern IntPtr nautilus_burn_drive_selection_get_device(IntPtr raw);

		[DllImport("libnautilus-burn")]
		static extern void nautilus_burn_drive_selection_set_device(IntPtr raw, IntPtr device);

		public string Device { 
			get {
				IntPtr raw_ret = nautilus_burn_drive_selection_get_device(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr device_as_native = GLib.Marshaller.StringToPtrGStrdup (value);
				nautilus_burn_drive_selection_set_device(Handle, device_as_native);
				GLib.Marshaller.Free (device_as_native);
			}
		}

		[DllImport("libnautilus-burn")]
		static extern IntPtr nautilus_burn_drive_selection_get_default_device(IntPtr raw);

		public string DefaultDevice { 
			get {
				IntPtr raw_ret = nautilus_burn_drive_selection_get_default_device(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libnautilus-burn")]
		static extern IntPtr nautilus_burn_drive_selection_get_drive(IntPtr raw);

		public Nautilus.BurnDrive Drive { 
			get {
				IntPtr raw_ret = nautilus_burn_drive_selection_get_drive(Handle);
				Nautilus.BurnDrive ret = Nautilus.BurnDrive.New (raw_ret);
				return ret;
			}
		}

#endregion
	}
}
