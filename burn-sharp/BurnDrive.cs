// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Nautilus {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct BurnDrive {

		public Nautilus.BurnDriveType Type;
		public string DisplayName;
		public int MaxSpeedWrite;
		public int MaxSpeedRead;
		public string CdRecordId;
		public string Device;
		private IntPtr _priv;

		public static Nautilus.BurnDrive Zero = new Nautilus.BurnDrive ();

		public static Nautilus.BurnDrive New(IntPtr raw) {
			if (raw == IntPtr.Zero) {
				return Nautilus.BurnDrive.Zero;
			}
			Nautilus.BurnDrive self = new Nautilus.BurnDrive();
			self = (Nautilus.BurnDrive) Marshal.PtrToStructure (raw, self.GetType ());
			return self;
		}

		[DllImport("libnautilus-burn")]
		static extern IntPtr nautilus_burn_drive_new();

		public static BurnDrive New()
		{
			return BurnDrive.New (nautilus_burn_drive_new());
		}

		[DllImport("libnautilus-burn")]
		static extern int nautilus_burn_drive_get_media_type(ref Nautilus.BurnDrive raw);

		public Nautilus.BurnMediaType MediaType { 
			get {
				int raw_ret = nautilus_burn_drive_get_media_type(ref this);
				Nautilus.BurnMediaType ret = (Nautilus.BurnMediaType) raw_ret;
				return ret;
			}
		}

		[DllImport("libnautilus-burn")]
		static extern bool nautilus_burn_drive_lock(ref Nautilus.BurnDrive raw, IntPtr reason, IntPtr reason_for_failure);

		public bool Lock(string reason, string reason_for_failure) {
			IntPtr reason_as_native = GLib.Marshaller.StringToPtrGStrdup (reason);
			bool raw_ret = nautilus_burn_drive_lock(ref this, reason_as_native, GLib.Marshaller.StringToPtrGStrdup(reason_for_failure));
			bool ret = raw_ret;
			GLib.Marshaller.Free (reason_as_native);
			return ret;
		}

		[DllImport("libnautilus-burn")]
		static extern int nautilus_burn_drive_get_media_type_from_path(IntPtr device_path);

		public static Nautilus.BurnMediaType GetMediaTypeFromPath(string device_path) {
			IntPtr device_path_as_native = GLib.Marshaller.StringToPtrGStrdup (device_path);
			int raw_ret = nautilus_burn_drive_get_media_type_from_path(device_path_as_native);
			Nautilus.BurnMediaType ret = (Nautilus.BurnMediaType) raw_ret;
			GLib.Marshaller.Free (device_path_as_native);
			return ret;
		}

		[DllImport("libnautilus-burn")]
		static extern IntPtr nautilus_burn_drive_get_file_image();

		public static Nautilus.BurnDrive FileImage { 
			get {
				IntPtr raw_ret = nautilus_burn_drive_get_file_image();
				Nautilus.BurnDrive ret = Nautilus.BurnDrive.New (raw_ret);
				return ret;
			}
		}

		[DllImport("libnautilus-burn")]
		static extern int nautilus_burn_drive_get_media_type_full(ref Nautilus.BurnDrive raw, out bool is_rewritable, out bool is_blank, out bool has_data, out bool has_audio);

		public Nautilus.BurnMediaType GetMediaTypeFull(out bool is_rewritable, out bool is_blank, out bool has_data, out bool has_audio) {
			int raw_ret = nautilus_burn_drive_get_media_type_full(ref this, out is_rewritable, out is_blank, out has_data, out has_audio);
			Nautilus.BurnMediaType ret = (Nautilus.BurnMediaType) raw_ret;
			return ret;
		}

		[DllImport("libnautilus-burn")]
		static extern long nautilus_burn_drive_get_media_size_from_path(IntPtr device_path);

		public static long GetMediaSizeFromPath(string device_path) {
			IntPtr device_path_as_native = GLib.Marshaller.StringToPtrGStrdup (device_path);
			long raw_ret = nautilus_burn_drive_get_media_size_from_path(device_path_as_native);
			long ret = raw_ret;
			GLib.Marshaller.Free (device_path_as_native);
			return ret;
		}

		[DllImport("libnautilus-burn")]
		static extern bool nautilus_burn_drive_unmount(ref Nautilus.BurnDrive raw);

		public bool Unmount() {
			bool raw_ret = nautilus_burn_drive_unmount(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libnautilus-burn")]
		static extern void nautilus_burn_drive_free(ref Nautilus.BurnDrive raw);

		public void Free() {
			nautilus_burn_drive_free(ref this);
		}

		[DllImport("libnautilus-burn")]
		static extern long nautilus_burn_drive_get_media_size(ref Nautilus.BurnDrive raw);

		public long MediaSize { 
			get {
				long raw_ret = nautilus_burn_drive_get_media_size(ref this);
				long ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libnautilus-burn")]
		static extern IntPtr nautilus_burn_drive_get_list(bool recorder_only, bool add_image);

		public static GLib.List GetList(bool recorder_only, bool add_image) {
			IntPtr raw_ret = nautilus_burn_drive_get_list(recorder_only, add_image);
			GLib.List ret = new GLib.List(raw_ret, typeof (Nautilus.BurnDrive));
			return ret;
		}

		[DllImport("libnautilus-burn")]
		static extern bool nautilus_burn_drive_unlock(ref Nautilus.BurnDrive raw);

		public bool Unlock() {
			bool raw_ret = nautilus_burn_drive_unlock(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libnautilus-burn")]
		static extern IntPtr nautilus_burn_drive_copy(ref Nautilus.BurnDrive raw);

		public Nautilus.BurnDrive Copy() {
			IntPtr raw_ret = nautilus_burn_drive_copy(ref this);
			Nautilus.BurnDrive ret = Nautilus.BurnDrive.New (raw_ret);
			return ret;
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
