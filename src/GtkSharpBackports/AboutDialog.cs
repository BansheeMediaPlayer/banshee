// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSharpBackports {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

	public  class AboutDialog : Gtk.Dialog {

		~AboutDialog()
		{
			Dispose();
		}

		[Obsolete]
		protected AboutDialog(GLib.GType gtype) : base(gtype) {}
		public AboutDialog(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern IntPtr gtk_about_dialog_new();

		public AboutDialog () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (AboutDialog)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_about_dialog_new();
		}

		[GLib.Property ("documenters")]
		public string[] Documenters {
			get {
				GLib.Value val = GetProperty ("documenters");
				string[] ret = (string[]) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("documenters", val);
				val.Dispose ();
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern IntPtr gtk_about_dialog_get_license(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern void gtk_about_dialog_set_license(IntPtr raw, IntPtr license);

		[GLib.Property ("license")]
		public string License {
			get  {
				IntPtr raw_ret = gtk_about_dialog_get_license(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr license_as_native = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_about_dialog_set_license(Handle, license_as_native);
				GLib.Marshaller.Free (license_as_native);
			}
		}
		
		[DllImport("libgtk-win32-2.0-0.dll")]
        static extern IntPtr gtk_about_dialog_set_wrap_license(IntPtr raw, bool wrap);
        
        public bool WrapLicense {   
            set {
                gtk_about_dialog_set_wrap_license(Handle, value);
            }
        }

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern IntPtr gtk_about_dialog_get_name(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern void gtk_about_dialog_set_name(IntPtr raw, IntPtr name);

		[GLib.Property ("name")]
		public new string Name {
			get  {
				IntPtr raw_ret = gtk_about_dialog_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr name_as_native = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_about_dialog_set_name(Handle, name_as_native);
				GLib.Marshaller.Free (name_as_native);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern IntPtr gtk_about_dialog_get_copyright(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern void gtk_about_dialog_set_copyright(IntPtr raw, IntPtr copyright);

		[GLib.Property ("copyright")]
		public string Copyright {
			get  {
				IntPtr raw_ret = gtk_about_dialog_get_copyright(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr copyright_as_native = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_about_dialog_set_copyright(Handle, copyright_as_native);
				GLib.Marshaller.Free (copyright_as_native);
			}
		}

		[GLib.Property ("authors")]
		public string[] Authors {
			get {
				GLib.Value val = GetProperty ("authors");
				string[] ret = (string[]) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("authors", val);
				val.Dispose ();
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern IntPtr gtk_about_dialog_get_translator_credits(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern void gtk_about_dialog_set_translator_credits(IntPtr raw, IntPtr translator_credits);

		[GLib.Property ("translator_credits")]
		public string TranslatorCredits {
			get  {
				IntPtr raw_ret = gtk_about_dialog_get_translator_credits(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr translator_credits_as_native = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_about_dialog_set_translator_credits(Handle, translator_credits_as_native);
				GLib.Marshaller.Free (translator_credits_as_native);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern IntPtr gtk_about_dialog_get_logo_icon_name(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern void gtk_about_dialog_set_logo_icon_name(IntPtr raw, IntPtr icon_name);

		[GLib.Property ("logo_icon_name")]
		public string LogoIconName {
			get  {
				IntPtr raw_ret = gtk_about_dialog_get_logo_icon_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr icon_name_as_native = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_about_dialog_set_logo_icon_name(Handle, icon_name_as_native);
				GLib.Marshaller.Free (icon_name_as_native);
			}
		}

		[GLib.Property ("artists")]
		public string[] Artists {
			get {
				GLib.Value val = GetProperty ("artists");
				string[] ret = (string[]) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("artists", val);
				val.Dispose ();
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern IntPtr gtk_about_dialog_get_website_label(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern void gtk_about_dialog_set_website_label(IntPtr raw, IntPtr website_label);

		[GLib.Property ("website_label")]
		public string WebsiteLabel {
			get  {
				IntPtr raw_ret = gtk_about_dialog_get_website_label(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr website_label_as_native = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_about_dialog_set_website_label(Handle, website_label_as_native);
				GLib.Marshaller.Free (website_label_as_native);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern IntPtr gtk_about_dialog_get_logo(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern void gtk_about_dialog_set_logo(IntPtr raw, IntPtr logo);

		[GLib.Property ("logo")]
		public Gdk.Pixbuf Logo {
			get  {
				IntPtr raw_ret = gtk_about_dialog_get_logo(Handle);
				Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
				return ret;
			}
			set  {
				gtk_about_dialog_set_logo(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern IntPtr gtk_about_dialog_get_website(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern void gtk_about_dialog_set_website(IntPtr raw, IntPtr website);

		[GLib.Property ("website")]
		public string Website {
			get  {
				IntPtr raw_ret = gtk_about_dialog_get_website(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr website_as_native = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_about_dialog_set_website(Handle, website_as_native);
				GLib.Marshaller.Free (website_as_native);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern IntPtr gtk_about_dialog_get_comments(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern void gtk_about_dialog_set_comments(IntPtr raw, IntPtr comments);

		[GLib.Property ("comments")]
		public string Comments {
			get  {
				IntPtr raw_ret = gtk_about_dialog_get_comments(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr comments_as_native = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_about_dialog_set_comments(Handle, comments_as_native);
				GLib.Marshaller.Free (comments_as_native);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern IntPtr gtk_about_dialog_get_version(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern void gtk_about_dialog_set_version(IntPtr raw, IntPtr version);

		[GLib.Property ("version")]
		public string Version {
			get  {
				IntPtr raw_ret = gtk_about_dialog_get_version(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr version_as_native = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_about_dialog_set_version(Handle, version_as_native);
				GLib.Marshaller.Free (version_as_native);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern GtkSharpBackports.AboutDialogActivateLinkFuncNative gtk_about_dialog_set_url_hook(GtkSharpBackports.AboutDialogActivateLinkFuncNative func, IntPtr data, GLib.DestroyNotify destroy);

		public static GtkSharpBackports.AboutDialogActivateLinkFunc SetUrlHook(GtkSharpBackports.AboutDialogActivateLinkFunc func) {
			GtkSharpBackports.AboutDialogActivateLinkFuncWrapper func_wrapper;
			IntPtr data;
			GLib.DestroyNotify destroy;
			if (func == null) {
				func_wrapper = null;
				data = IntPtr.Zero;
				destroy = null;
			} else {
				func_wrapper = new GtkSharpBackports.AboutDialogActivateLinkFuncWrapper (func);
				data = (IntPtr) GCHandle.Alloc (func_wrapper);
				destroy = GLib.DestroyHelper.NotifyHandler;
			}
			GtkSharpBackports.AboutDialogActivateLinkFuncNative raw_ret = gtk_about_dialog_set_url_hook(func_wrapper.NativeDelegate, data, destroy);
			GtkSharpBackports.AboutDialogActivateLinkFunc ret = GtkSharpBackports.AboutDialogActivateLinkFuncWrapper.GetManagedDelegate (raw_ret);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern GtkSharpBackports.AboutDialogActivateLinkFuncNative gtk_about_dialog_set_email_hook(GtkSharpBackports.AboutDialogActivateLinkFuncNative func, IntPtr data, GLib.DestroyNotify destroy);

		public static GtkSharpBackports.AboutDialogActivateLinkFunc SetEmailHook(GtkSharpBackports.AboutDialogActivateLinkFunc func) {
			GtkSharpBackports.AboutDialogActivateLinkFuncWrapper func_wrapper;
			IntPtr data;
			GLib.DestroyNotify destroy;
			if (func == null) {
				func_wrapper = null;
				data = IntPtr.Zero;
				destroy = null;
			} else {
				func_wrapper = new GtkSharpBackports.AboutDialogActivateLinkFuncWrapper (func);
				data = (IntPtr) GCHandle.Alloc (func_wrapper);
				destroy = GLib.DestroyHelper.NotifyHandler;
			}
			GtkSharpBackports.AboutDialogActivateLinkFuncNative raw_ret = gtk_about_dialog_set_email_hook(func_wrapper.NativeDelegate, data, destroy);
			GtkSharpBackports.AboutDialogActivateLinkFunc ret = GtkSharpBackports.AboutDialogActivateLinkFuncWrapper.GetManagedDelegate (raw_ret);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern IntPtr gtk_about_dialog_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_about_dialog_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}
	}
}
