<Type Name="IntervalHeap&lt;T&gt;" FullName="Hyena.Collections.IntervalHeap&lt;T&gt;">
  <TypeSignature Language="C#" Value="public class IntervalHeap&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.ICollection" />
  <AssemblyInfo>
    <AssemblyName>Hyena</AssemblyName>
    <AssemblyVersion>0.90.1.41380</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter>T</TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IntervalHeap ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs><summary>To be added.</summary><remarks>To be added.</remarks></Docs>
    </Member><Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (T item);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Void</ReturnType></ReturnValue>
      <Parameters><Parameter Name="item" Type="T" /></Parameters>
      <Docs><param name="item">To be added.</param><summary>To be added.</summary><remarks>To be added.</remarks></Docs>
    </Member><Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Void</ReturnType></ReturnValue>
      <Parameters />
      <Docs><summary>To be added.</summary><remarks>To be added.</remarks></Docs>
    </Member><Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (T item);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Boolean</ReturnType></ReturnValue>
      <Parameters><Parameter Name="item" Type="T" /></Parameters>
      <Docs><param name="item">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member><Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (T[] array, int index);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Void</ReturnType></ReturnValue>
      <Parameters><Parameter Name="array" Type="T[]" /><Parameter Name="index" Type="System.Int32" /></Parameters>
      <Docs><param name="array">To be added.</param><param name="index">To be added.</param><summary>To be added.</summary><remarks>To be added.</remarks></Docs>
    </Member><Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue><ReturnType>System.Int32</ReturnType></ReturnValue>
      <Docs><summary>To be added.</summary><value>To be added.</value><remarks>To be added.</remarks></Docs>
    </Member><Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator ();" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType></ReturnValue>
      <Parameters />
      <Docs><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member><Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue><ReturnType>System.Boolean</ReturnType></ReturnValue>
      <Docs><summary>To be added.</summary><value>To be added.</value><remarks>To be added.</remarks></Docs>
    </Member><Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public virtual bool IsSynchronized { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue><ReturnType>System.Boolean</ReturnType></ReturnValue>
      <Docs><summary>To be added.</summary><value>To be added.</value><remarks>To be added.</remarks></Docs>
    </Member><Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public virtual T Peek ();" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>T</ReturnType></ReturnValue>
      <Parameters />
      <Docs><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member><Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public virtual T Pop ();" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>T</ReturnType></ReturnValue>
      <Parameters />
      <Docs><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member><Member MemberName="Push">
      <MemberSignature Language="C#" Value="public virtual void Push (T item, int priority);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Void</ReturnType></ReturnValue>
      <Parameters><Parameter Name="item" Type="T" /><Parameter Name="priority" Type="System.Int32" /></Parameters>
      <Docs><param name="item">To be added.</param><param name="priority">To be added.</param><summary>To be added.</summary><remarks>To be added.</remarks></Docs>
    </Member><Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual bool Remove (T item);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Boolean</ReturnType></ReturnValue>
      <Parameters><Parameter Name="item" Type="T" /></Parameters>
      <Docs><param name="item">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member><Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static Hyena.Collections.IntervalHeap&lt;T&gt; Synchronized (Hyena.Collections.IntervalHeap&lt;T&gt; heap);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>Hyena.Collections.IntervalHeap&lt;T&gt;</ReturnType></ReturnValue>
      <Parameters><Parameter Name="heap" Type="Hyena.Collections.IntervalHeap&lt;T&gt;" /></Parameters>
      <Docs><param name="heap">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member><Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public virtual object SyncRoot { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue><ReturnType>System.Object</ReturnType></ReturnValue>
      <Docs><summary>To be added.</summary><value>To be added.</value><remarks>To be added.</remarks></Docs>
    </Member><Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Void</ReturnType></ReturnValue>
      <Parameters><Parameter Name="array" Type="System.Array" /><Parameter Name="index" Type="System.Int32" /></Parameters>
      <Docs><param name="array">To be added.</param><param name="index">To be added.</param><summary>To be added.</summary><remarks>To be added.</remarks></Docs>
    </Member><Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Collections.IEnumerator</ReturnType></ReturnValue>
      <Parameters />
      <Docs><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member><Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public virtual void TrimExcess ();" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Void</ReturnType></ReturnValue>
      <Parameters />
      <Docs><summary>To be added.</summary><remarks>To be added.</remarks></Docs>
    </Member>
  </Members>
</Type>
